---
- name: configure common functionality I expect in my RPi's
  hosts: raspberries
  remote_user: pi
  sudo: yes
  vars:
    http_port: 80
    max_clients: 200
  tasks:
  # - name: setup open-ocd on rpi
  #   git:
  #       git clone git://git.code.sf.net/p/openocd/code openocd-code
  #       install it
  #       cd openocd-code
  #       ./bootstrap
  #       ./configure --enable-sysfsgpio --enable-bcm2835gpio
  #       make
  #       sudo make install
  #
  # - name: get a dhcp server
  #   apt-get:
  #     sudo apt-get install isc-dhcp-server
  #

  - name: get a dhcp server running
    apt:
      name: dnsmasq
      state: present

  # - name: configure interfaces file for dhcp on ethernet
  #   blockinfile: |
  #     dest=/etc/network/interfaces
  #     block= |
  #       auto eth0
  #       iface eth0 inet static
  #       address 192.168.0.1
  #       netmask 255.255.255.0

  - name: create and configure dnsmasq config file
    copy:
      src: configs/_-etc_-dnsmasq.conf
      dest: /etc/dnsmasq.conf
      backup: yes
  - name: restart networking
    shell: "{{ item.command }}"
    with_items:
      - { command: 'sudo service networking restart' }
      - { command: 'sudo service dnsmasq restart' }




  - name: configure terminal coms
    apt:
      name: picocom
      state: present
  - name: get a tftp server running
    apt:
      name: "{{ item.name }}"
      state: "{{ item.state }}"
    # apt:
    #   name: tftpd
    #   state: present
    # apt:
    #   name: tftp
    #   state: present
    with_items:
      - { name: 'xinetd', state: 'present' }
      - { name: 'tftpd', state: 'present' }
      - { name: 'tftp', state: 'present' }

  - name: INSTALL UTILS - tmux
    apt:
      name: "{{ item.name }}"
      state: "{{ item.state }}"
    with_items:
      - { name: 'tmux', state: 'present' }
      - { name: 'python-setuptools', state: 'present' }
      - { name: 'python-dev', state: 'present' }
      - { name: 'python3-dev', state: 'present' }
      - { name: 'telnet', state: 'present' }

  - name: INSTALL UTILS - vncserver
    apt:
      name: "{{ item.name }}"
      state: "{{ item.state }}"
    with_items:
      - { name: 'tightvncserver', state: 'present' }

  # create a directory if it doesn't exist
  ## do all the tftp setup
  - name: make config
    file:
      path: "{{ item.path }}"
      state: "{{ item.state }}"
    with_items:
      # - { path: '/etc/dhcp/dhcpd.conf', state: 'directory' }
      - { path: '/etc/xinetd.d', state: 'directory' }
      - { path: '/etc/xinetd.d/tftp', state: 'touch' }

  - name: insert/update configuration using a local file
    copy:
      src: configs/_-etc_-xinetd.d_-tftp
      dest: /etc/xinetd.d/tftp

  - name: make the tftpboot dir
    file:
      path: /tftpboot
      state: directory

  - name: Run a command using a templated variable (always use quote filter to avoid injection)
    shell: "{{ item.command }}"
    with_items:
      - { command: 'chmod -R 777 /tftpboot' }
      - { command: 'chown -R nobody /tftpboot' }
      - { command: 'sudo /etc/init.d/xinetd stop' }
      - { command: 'sudo /etc/init.d/xinetd start' }

  # - name: Install RPIO
  #   easy_install:
  #     name: RPIO


  # - name: getting openocd running on rpi


#   - name: RPi camera interface
#   shell:
#   git clone https://github.com/silvanmelchior/RPi_Cam_Web_Interface.git
# cd RPi_Cam_Web_Interface
# chmod u+x *.sh
# ./install.sh


  ## You'll need to restart the service
  # /etc/init.d/xinetd stop
  # /etc/init.d/xinetd start

  #
  # - name: write config
  #   blockinfile: |
  #     dest=/etc/xinetd.d/tftps backup=yes
  #     content="
  #     iface eth0 inet static
  #         address 192.168.0.1
  #         netmask 255.255.255.0"
    # lineinfile:
    #   dest: /etc/xinetd.d/tftp
    #   line: "{{ item.line }}"
    # with_items:
    #   - { line: 'kernel.shmall = 2097152' }
    #   - { line: 'kernel.shmmax = 134217728' }
    #   - {  line: 'fs.file-max = 65536' }
    #



  # - file exists: touch /etc/xinetd.d/tftp
  #   /etc/xinetd.d/tftp
  # - name: ensure apache is at the latest version
  #   yum: name=httpd state=latest
  # - name: write the apache config file
  #   template: src=/srv/httpd.j2 dest=/etc/httpd.conf
  #   notify:
  #   - restart apache
  # - name: ensure apache is running (and enable it at boot)
  #   service: name=httpd state=started enabled=yes
  # handlers:
  #   - name: restart apache
  #     service: name=httpd state=restarted
